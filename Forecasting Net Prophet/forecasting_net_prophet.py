# -*- coding: utf-8 -*-
"""Forecasting Net Prophet

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fb9-Hn1DB3iSxaLhU3rD8_Xq__MjDkKX
"""

# Install the required libraries
!pip install pystan
!pip install prophet
!pip install hvplot
!pip install holoviews

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import holoviews as hv
from prophet import Prophet
import hvplot.pandas
import datetime as dt
import seaborn as sns
# %matplotlib inline

"""Step 1: Find Unusual Patterns in Hourly Google Search Traffic

The data science manager asks if the Google search traffic for the company links to any financial events at the company. Or, does the search traffic data just present random noise? To answer this question, pick out any unusual patterns in the Google search data for the company, and connect them to the corporate financial events.

To do so, complete the following steps:

Read the search data into a DataFrame, and then slice the data to just the month of May 2020. (During this month, MercadoLibre released its quarterly financial results.) Use hvPlot to visualize the results. Do any unusual patterns exist?

Calculate the total search traffic for the month, and then compare the value to the monthly median across all months. Did the Google search traffic increase during the month that MercadoLibre released its financial results?
"""

# Upload the "google_hourly_search_trends.csv" file into Colab, then store in a Pandas DataFrame
# Set the "Date" column as the Datetime Index.

from google.colab import files
uploaded = files.upload()

df_mercado_trends = pd.read_csv("google_hourly_search_trends.csv",
                 index_col="Date",
                 infer_datetime_format=True,
                 parse_dates=True
                )
# Review the first and last five rows of the DataFrame
# YOUR CODE HERE
df_mercado_trends.head(5)
df_mercado_trends.tail(5)

df_mercado_trends.head()

# Review the data types of the DataFrame using the info function
# YOUR CODE HERE
df_mercado_trends.info()

# Holoviews extension to render hvPlots in Colab
hv.extension('bokeh')

# Slice the DataFrame to just the month of May 2020
df_may_2020 = df_mercado_trends.loc['05-01-2020' : '05-31-2020']


# Use hvPlot to visualize the data for May 2020
# YOUR CODE HERE
df_may_2020.hvplot()

"""Step 2: Calculate the total search traffic for the month, and then compare the value to the monthly median across all months. Did the Google search traffic increase during the month that MercadoLibre released its financial results?"""

#STEP 2
# Calculate the sum of the total search traffic for May 2020
traffic_may_2020 =  df_mercado_trends.loc['05-01-2020' : '05-31-2020'].sum()

# View the traffic_may_2020 value
# YOUR CODE HERE#
traffic_may_2020

# Calcluate the monhtly median search traffic across all months
# Group the DataFrame by index year and then index month, chain the sum and then the median functions
median_monthly_traffic = df_mercado_trends["Search Trends"].groupby(by=[df_mercado_trends.index.year,df_mercado_trends.index.month]).sum().median()


# View the median_monthly_traffic value
# YOUR CODE HERE
median_monthly_traffic

# Compare the seach traffic for the month of May 2020 to the overall monthly median value
# YOUR CODE HERE
display(traffic_may_2020)
display(median_monthly_traffic)

"""Answer the following question:
Question: Did the Google search traffic increase during the month that MercadoLibre released its financial results?

Answer: # Yes, it increased by almost 3 thousand.

#### Step 1: Group the hourly search data to plot the average traffic by the day of the week (for example, Monday vs. Friday)
"""

# Holoviews extension to render hvPlots in Colab
hv.extension('bokeh')

# Group the hourly search data to plot (use hvPlot) the average traffic by the day of week
# YOUR CODE HERE


avg_hourly_traffic= df_mercado_trends["Search Trends"].groupby(by=[df_mercado_trends.index.dayofweek]).mean()

avg_hourly_traffic.hvplot()

#Step 2: Using hvPlot, visualize this traffic as a heatmap, referencing the index.hour as
#the x-axis and the index.dayofweek as the y-axis.
#Does any day-of-week effect that you observe concentrate in just a few hours of that day?

avg_hourly_traffic=df_mercado_trends["Search Trends"].groupby(by=[df_mercado_trends.index.hour]).mean()


avg_hourly_traffic

#Step 3: Group the search data by the week of the year. Does the search traffic tend to increase during the winter holiday period (weeks 40 through 52)?
hv.extension('bokeh')

# Group the hourly search data to plot (use hvPlot) the average traffic by the week of the year
# YOUR CODE HERE
avg_hourly_traffic=df_mercado_trends["Search Trends"].groupby(by=[df_mercado_trends.index.weekofyear]).mean()
avg_hourly_traffic.hvplot()

"""Question: Does the search traffic tend to increase during the winter holiday period (weeks 40 through 52)?

Answer: During weeks 40 to 52, traffic seems to slightly increase. From 47 to being the lowest in week 40 to 49.7 being its peak at week 51.

Step 3: Read in and plot the stock price data. Concatenate the stock price data to the search data in a single DataFrame.
"""

# Upload the "mercado_stock_price.csv" file into Colab, then store in a Pandas DataFrame

from google.colab import files
uploaded = files.upload()



# Set the "date" column as the Datetime Index.

df_mercado_stock = pd.read_csv("mercado_stock_price.csv",
                 index_col="date",
                 infer_datetime_format=True,
                 parse_dates=True
                )
# View the first and last five rows of the DataFrame
df_mercado_stock.head(5)
df_mercado_stock.tail(5)

# Holoviews extension to render hvPlots in Colab
hv.extension('bokeh')

# Use hvPlot to visualize the closing price of the df_mercado_stock DataFrame
# YOUR CODE HERE
df_mercado_stock['close'].hvplot()

# Concatenate the df_mercado_stock DataFrame with the df_mercado_trends DataFrame
# Concatenate the DataFrame by columns (axis=1), and drop and rows with only one column of data
mercado_stock_trends_df = pd.concat([df_mercado_stock,df_mercado_trends], axis=1).dropna()
# View the first and last five rows of the DataFrame
# YOUR CODE HERE
mercado_stock_trends_df.head(5)
mercado_stock_trends_df.tail(5)

"""Step 2: Market events emerged during the year of 2020 that many companies found difficult. But, after the initial shock to global financial markets, new customers and revenue increased for e-commerce platforms. Slice the data to just the first half of 2020 (2020-01 to 2020-06 in the DataFrame), and then use hvPlot to plot the data. Do both time series indicate a common trend that’s consistent with this narrative?"""

# For the combined dataframe, slice to just the first half of 2020 (2020-01 through 2020-06)
first_half_2020 =  mercado_stock_trends_df.loc['2020-01' : '2020-06']

# View the first and last five rows of first_half_2020 DataFrame
# YOUR CODE HERE
first_half_2020.head()

# Holoviews extension to render hvPlots in Colab
hv.extension('bokeh')

# Use hvPlot to visualize the close and Search Trends data
# Plot each column on a separate axes using the following syntax
# `hvplot(shared_axes=False, subplots=True).cols(1)`
# YOUR CODE HERE
first_half_2020.hvplot(shared_axes=False, subplots=True).cols(1)

"""Answer the following question: Question: Do both time series indicate a common trend that’s consistent with this narrative?

Answer: Both charts seem to be following a similar trend. Both have peaks and lows in the same time frame.
"""

# Create a new column in the mercado_stock_trends_df DataFrame called Lagged Search Trends
# This column should shift the Search Trends information by one hour
mercado_stock_trends_df['Lagged Search Trends'] = mercado_stock_trends_df['Search Trends'].shift(1)
mercado_stock_trends_df

# Create a new column in the mercado_stock_trends_df DataFrame called Stock Volatility
# This column should calculate the standard deviation of the closing stock price return data over a 4 period rolling window
mercado_stock_trends_df['Stock Volatility'] = mercado_stock_trends_df["close"].rolling(window=4).std()

mercado_stock_trends_df.dropna()

# Holoviews extension to render hvPlots in Colab
hv.extension('bokeh')

# Use hvPlot to visualize the stock volatility
# YOUR CODE HERE
mercado_stock_trends_df.hvplot()

# Create a new column in the mercado_stock_trends_df DataFrame called Hourly Stock Return
# This column should calculate hourly return percentage of the closing price
mercado_stock_trends_df['Hourly Stock Return'] = mercado_stock_trends_df['close'].pct_change()

# View the first and last five rows of the mercado_stock_trends_df DataFrame
# YOUR CODE HERE
mercado_stock_trends_df.head(5)
mercado_stock_trends_df.tail(5)

"""Step 4: Review the time series correlation, and then answer the following question: Does a predictable relationship exist between the lagged search traffic and the stock volatility or between the lagged search traffic and the stock price returns?¶"""

# Construct correlation table of Stock Volatility, Lagged Search Trends, and Hourly Stock Return
# YOUR CODE HERE
mercado_stock_trends_df[["Lagged Search Trends", "Stock Volatility", "Hourly Stock Return"]].corr
mercado_stock_trends_df.head(10)

"""Answer the following question:




Question:
Does a predictable relationship exist between the lagged search traffic and the stock volatility or between the lagged search traffic and the stock price returns?

Answer: There is no predictable relationship between lagged search and traffic or the stock price returns and lagged search traffic.

Step 4: Create a Time Series Model with Prophet

Now, you need to produce a time series model that analyzes and forecasts patterns in the hourly search data. To do so, complete the following steps:

Set up the Google search data for a Prophet forecasting model.

After estimating the model, plot the forecast. How's the near-term forecast for the popularity of MercadoLibre?

Plot the individual time series components of the model to answer the following questions:

What time of day exhibits the greatest popularity?

Which day of the week gets the most search traffic?

What's the lowest point for search traffic in the calendar year?
"""

# Using the df_mercado_trends DataFrame, reset the index so the date information is no longer the index
mercado_prophet_df = df_mercado_trends.reset_index()
# Label the columns ds and y so that the syntax is recognized by Prophet
# YOUR CODE HERE
mercado_prophet_df.columns=['ds','y']

# Drop an NaN values from the prophet_df DataFrame
mercado_prophet_df.dropna()

# View the first and last five rows of the mercado_prophet_df DataFrame
# YOUR CODE HERE
mercado_prophet_df.head(5)
mercado_prophet_df.tail(5)

# Call the Prophet function, store as an object
model_mercado_trends =Prophet()

# Fit the time-series model.

model_mercado_trends.fit(mercado_prophet_df)

# Create a future dataframe to hold predictions
# Make the prediction go out as far as 2000 hours (approx 80 days)
future_mercado_trends = model_mercado_trends.make_future_dataframe(periods=2000, freq='H')

# View the last five rows of the future_mercado_trends DataFrame
# YOUR CODE HERE
future_mercado_trends.tail(5)

# Make the predictions for the trend data using the future_mercado_trends DataFrame
forecast_mercado_trends = model_mercado_trends.predict(future_mercado_trends)

# Display the first five rows of the forecast_mercado_trends DataFrame
# YOUR CODE HERE
forecast_mercado_trends.head(5)

# Plot the Prophet predictions for the Mercado trends data
# YOUR CODE HERE

model_mercado_trends.plot(forecast_mercado_trends)

"""Answer the following question:
Question: How's the near-term forecast for the popularity of MercadoLibre?

Answer: It seems like the the near-term trend is going downward in the recent times, it may be losing its popularity.
"""

# Set the index in the forecast_mercado_trends DataFrame to the ds datetime column
forecast_mercado_trends = forecast_mercado_trends.set_index('ds')

# View the only the yhat,yhat_lower and yhat_upper columns from the DataFrame
# YOUR CODE HERE

forecast_mercado_trends[['yhat','yhat_lower','yhat_upper']]

# Reset the index in the forecast_mercado_trends DataFrame
forecast_mercado_trends=forecast_mercado_trends.reset_index()

# Use the plot_components function to visualize the forecast results
# for the forecast_canada DataFrame
figures_mercado_trends = model_mercado_trends.plot_components(forecast_mercado_trends)

"""What time of day exhibits the greatest popularity?
- The greatest exhibit popularity is from 5 to 8.

Which day of the week gets the most search traffic?
- Most Search Traffic is on Tuesdays.

What's the lowest point for search traffic in the calendar year?
- October is the lowest point for search traffic.
"""